// Size of the mouse button records array
#define TOP_REF_MOUSE_BTN  4

struct DoubleClickImpl
{
  int Timeout;  // delay between two clicks that lets to count them as one sequence
  
  int  MBtn;             // a mouse button being sequenced right now
  int  Taps;             // number of sequential clicks
  bool DblClick;         // the button was just double-clicked
};

DoubleClickImpl DblClk;

// Individual mouse button state record
struct MBtnRecord
{
  bool      IsDown;           // is being held
  bool      StateJustChanged; // just pushed or released
  int       StateTimer;       // current state time
};

MBtnRecord  MBtnRec[TOP_REF_MOUSE_BTN];

//===========================================================================
//
// DoubleClick::Timeout property
//
//===========================================================================
int get_Timeout(this DoubleClick*)
{
  return DblClk.Timeout;
}

void set_Timeout(this DoubleClick*, int value)
{
  if (value < 0) value = 0;
  DblClk.Timeout = value;
}

//===========================================================================
//
// DoubleClick::Event[] property
//
//===========================================================================
bool geti_Event(this DoubleClick*, MouseButton mb)
{
  if (mb < 0 || mb >= TOP_REF_MOUSE_BTN)
    return false;
  return DblClk.MBtn == mb && DblClk.DblClick;
}

//===========================================================================
//
// DoubleClick::ClaimThisEvent()
//
//===========================================================================
static void DoubleClick::ClaimThisEvent()
{
  DblClk.DblClick = false;
}

//===========================================================================
//
// DoubleClick::Reset()
//
//===========================================================================
static void DoubleClick::Reset()
{
  DblClk.MBtn = 0;
  DblClk.Taps = 0;
  DblClk.DblClick = false;
  
  MouseButton mb = eMouseLeft;
  while (mb < TOP_REF_MOUSE_BTN)
  {
    MBtnRec[mb].IsDown = false;
    MBtnRec[mb].StateJustChanged = false;
    MBtnRec[mb].StateTimer = 0;
    mb++;
  }
}

//===========================================================================
//
// game_start()
// Initializing DoubleClick.
//
//===========================================================================
function game_start()
{
  DblClk.Timeout = DOUBLECLICK_DEFAULT_TIMEOUT;
  DoubleClick.Reset();
}

//===========================================================================
//
// repeatedly_execute_always()
// The listening routine.
//
//===========================================================================
function repeatedly_execute_always()
{
  // find real milliseconds per tick
  int tick_ms = 1000 / GetGameSpeed();
  if (tick_ms == 0)
    tick_ms = 1; // very unlikely, but who knows...
  
  // Iterate through all the mouse buttons and update their state.
  MouseButton mb = eMouseLeft;
  while (mb < TOP_REF_MOUSE_BTN)
  {
    // new up/down state
    bool mb_was_down = MBtnRec[mb].IsDown;
    // last up/down state
    bool mb_down = Mouse.IsButtonDown(mb);

    // Clear signal key data, which is kept for a single tick only
    if (MBtnRec[mb].StateJustChanged)
    {
      if (DblClk.MBtn == mb)
        DblClk.DblClick = false;
      MBtnRec[mb].StateTimer = 0;
      MBtnRec[mb].StateJustChanged = false;
    }
    
    // Button state is the same
    if (mb_was_down == mb_down)
    {
      // update state timer
      MBtnRec[mb].StateTimer += tick_ms;
      if (!mb_down)
      { // button is still up
        if (MBtnRec[mb].StateTimer > DblClk.Timeout)
        {
          // too much time passed since last click
          if (DblClk.MBtn == mb)
          {
            // reset tap sequence
            DblClk.MBtn  = 0;
            DblClk.Taps = 0;
          }
        }
      }
    }
    // Button state changed
    else
    {
      MBtnRec[mb].StateJustChanged = true;
      if (mb_down)
      { // button is now down
        MBtnRec[mb].IsDown = true;
        // update sequencing
        if (DblClk.MBtn != mb)
        {
          DblClk.MBtn = mb;
          DblClk.Taps = 1;
        }
        else
        {
          DblClk.Taps++;
          if (DblClk.Taps == 2)
            DblClk.DblClick = true;
        }
      }
      else
      { // button is now up
        MBtnRec[mb].IsDown = false;
      }
    }
    
    mb++;
  }
}
