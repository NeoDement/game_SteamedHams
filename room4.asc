// room script file

AudioChannel* fireChannel;
AudioChannel* waterChannel;




function hOven_AnyClick()
{
  if (Verbs.MovePlayer(150, 109)) {
    
    player.FaceDirection(eDirectionRight);
    
    // Walk To (does nothing)
    if(Verbs.UsedAction(eGA_WalkTo)) {
    }

    // Look At
    else if(Verbs.UsedAction(eGA_LookAt)) {
      GenericResponse(eResponse_Hmm);
    }
    
     // Use/Push/Pull/Open
    else if(Verbs.UsedAction(eGA_Push) || Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_Use) || Verbs.UsedAction(eGA_Open)) {
      
         StartCutscene(eSkipESCOrRightButton);

        
       player.LockView(VSKINNER_PICKUP_LOW);
       player.Animate(0, 8, eOnce, eBlock);
       player.UnlockView();
       
       
       oOvenDoor.Visible = false;
       
       //AudioChannel* ovenChannel = aOpenOven.Play();
       //ovenChannel.Volume = 15;
       aOpenOven.Play();
       
      if (ChalmersInHouse) {
         
         //aFire_Quiet.Stop();
         //AudioChannel* fireChannel = aFire.Play(eAudioPriorityNormal, eRepeat);
         
         if (fireChannel)
         {
         fireChannel.Volume = 100;
         }
         
         
         
         
         oOvenFire.Visible = true;
         oOvenFire.SetView(VOVENFIRE);
         oOvenFire.Animate(0,  4, eRepeat, eNoBlock);
      


      //only play full dialog if its your first time looking in the oven
      if(OvenHasBeenOpened == false) {
        Wait(10);
        
        //aSkinner_eegads.Play();
        player.Say("&4 Oh, ye Gods!");
        
        OvenHasBeenOpened = true;
      }


      Wait(20);
      
       player.LockView(VSKINNER_PICKUP_LOW);
       player.Animate(0, 8, eOnce, eBlock);
       player.UnlockView();
       
       //aFire.Stop();
       //aFire_Quiet.Play(eAudioPriorityNormal, eRepeat);
       
         if (fireChannel)
         {
         fireChannel.Volume = 15;
         }
       
      oOvenFire.Visible = false;
      oOvenDoor.Visible = true;
      
      
      
      //aSkinner_roastisruined.Play();
      player.Say("&5 My roast is ruined!");
      
      }
    
    
      else
      {
       Wait(15);
      

      
       player.LockView(VSKINNER_PICKUP_LOW);
       player.Animate(0, 8, eOnce, eBlock);
       player.UnlockView();
       
       aOvenClose.Play();
       
      oOvenFire.Visible = false;
      oOvenDoor.Visible = true;
      
      Wait(10);
      
      
      GenericResponse(eResponse_Yummy);
      
      
    }
    
    EndCutscene();
    }
    
    // Close
    else if(Verbs.UsedAction(eGA_Close)) {
      GenericResponse(eResponse_No);
    }
    
    
    // Pickup/Use With (UseInv)
    else if(Verbs.UsedAction(eGA_PickUp) || Verbs.UsedAction(eGA_UseInv)) {
      GenericResponse(eResponse_No);
     
    }

    // Talk To
    else if(Verbs.UsedAction(eGA_TalkTo)) {
      GenericResponse(eResponse_Talk);
    }
    
    // any other verb
    else {
      GenericResponse(eResponse_Uhh);
    }
  }  
}





















function PlayCreditsScene()
{
 
  //reset chalmers anim then move him to the kitchen
  cChalmers.ChangeView(VCHALMERS_WALK);
  cChalmers.SpeechView = VCHALMERS_TALK;
  cChalmers.UnlockView();
  Wait(1);       
  cChalmers.ChangeRoom(4, 24, 109, eDirectionRight);  
  
  //door animation
  oDiningRoomDoor.Visible = true;
  aSwingdoor.Play();
  Wait(10);
  oDiningRoomDoor.Visible = false;
  
  
  //play idle window anim until it's time to react to chalmers  
  Wait(1);       
  player.ChangeView(VSKINNER_WINDOW_IDLE);
  player.UnlockView();


  player.LockView(VSKINNER_WINDOW_SURPRISE); 
  player.Animate(0, 16, eOnce, eNoBlock);

  //chalmers reacts with surprise.
  cChalmers.Say("&4 Uh-");

  player.Frame = 2;

  //player.LockView(VSKINNER_WINDOW_SURPRISE); 
  Wait(20);   
   
  SetNextScreenTransition(eTransitionInstant);
  cScroller.SetAsPlayer();     
  
  //reset chalmers and skinners anims for the next scene
  //Wait(1);
  cChalmers.UnlockView();
  cChalmers.FaceDirection(eDirectionRight);
      
}


function PlayLaterThatDayScene()
{
 //hide the ui
 gAction.Visible = false;
 gMain.Visible = false;
 mouse.Visible = false;
 
   //Wait(10);
   SetNextScreenTransition(eTransitionInstant);
   cScroller.SetAsPlayer();
   
   //smoke is darker after skinner returns (uh oh)
   oOvenSmoke.Tint(10, 10, 10, 30, 1);  
}



function StartWindowDialog()
{
    WindowHasBeenLookedOut = true;
    
    //walk near to the window, say a line, start the dialog
    //player.Walk(185,  106, eBlock); //player is already near window soo...
    player.FaceDirection(eDirectionRight);
    //aSkinner_butwhatif.Play();
    player.Say("&6 But what if...");     
    dWindowDilemna.Start();
}




function window_Look()
{
  if (OvenHasBeenOpened == true && WindowHasBeenLookedOut == false) //oven has been opened and skinner hasn't monologued, so now he will begin to plot and scheme
  {
    StartWindowDialog();
  }
  else //oven might not be open, skinner might not have monologued. either way we're doing a generic dialog string.
  {
    GenericResponse(eResponse_Hmm);
  }
}





function PlayWindowClimbAnim()
{
    StartCutscene(eSkipESCOrRightButton);
  
   //walk nearer to the window
   player.Walk(194,  104, eBlock, eAnywhere);
   
   //play window climbing animation
   player.LockView(VSKINNER_WINDOWCLIMB);
   player.Animate(0, 8, eOnce, eBlock); 
   
   
   if (CreditsHaveRolled == true) //credits have already rolled, so send them to "Later that day..."
   {
      PlayLaterThatDayScene();
      cSkinner.AddInventory(iBurger);
   }
      
   else if (CreditsHaveRolled == false) //credits haven't rolled yet, so play them and set the variable to true
   {
      CreditsHaveRolled = true;   
      PlayCreditsScene();
   }
}




function PlayWindowOpenAnim()
{
 //walk near the window
 player.Walk(185,  110, eBlock, eAnywhere);
 
 //play window opening animation
 aOpenwindow.Play();
 player.LockView(VSKINNER_PICKUP_LOW);
 player.Animate(0, 8, eOnce, eBlock);
 oWindow.Visible = true;
 player.LockView(VSKINNER_PICKUP_HIGH);
 player.Animate(0, 8, eOnce, eBlock);
 
 //reset to default walk cycle
 player.UnlockView(); 

 
 if (WindowHasBeenLookedOut == true && player.HasInventory(iBurger) == false) //if they don't have the burger but they have looked out the window, they need to play one of two cutscenes
 { 
   PlayWindowClimbAnim();    
 }
 
}





function PlayWindowCloseAnim()
{
 //walk near the window
 player.Walk(185,  110, eBlock, eAnywhere);
 
 //play window opening animation
 aOpenwindow.Play();
 player.LockView(VSKINNER_PICKUP_HIGH);
 player.Animate(0, 8, eOnce, eBlock);
 oWindow.Visible = false;
 player.LockView(VSKINNER_PICKUP_LOW);
 player.Animate(0, 8, eOnce, eBlock);

 //reset to default walk cycle
 player.UnlockView(); 

}





function window_Open()
{
  if (oWindow.Visible == true) //window is already open, so do nothing
  {
    GenericResponse(eResponse_No);
  }  
  else if (oWindow.Visible == false) //window is closed. open the window, and if you should start climbing out, do so
  {
    PlayWindowOpenAnim();
  }
  
  Wait(10);
}




function window_Close()
{
  if (oWindow.Visible == false) //window is already closed, so do nothing
  {
    GenericResponse(eResponse_No);
  }  
  else if (oWindow.Visible == true) //window is open. close the window.
  {
    PlayWindowCloseAnim();
  }
  
  Wait(10);
}







function hWindow_AnyClick()
{  
  if (Verbs.MovePlayer(185, 110)) { //walk as close to the window as possible
    
    player.FaceDirection(eDirectionRight);
    
    // Walk To (does nothing)
    if(Verbs.UsedAction(eGA_WalkTo)) {
      
      if (WindowHasBeenLookedOut == true) //if they have monologued then:
      {  
        if (oWindow.Visible == true) //check if the window is open and
        {    
         if (player.HasInventory(iBurger) == false) //they didn't already have the burger.
         {
           PlayWindowClimbAnim(); //play the window climb anim and the appropriate cutscene.
         }
        }


      }
      
    }





    // USE
    else if(Verbs.UsedAction(eGA_Use)) {
      
      if (WindowHasBeenLookedOut == false) //if they haven't even monologued yet, just use the logic in the Look script
      {
        
        if (OvenHasBeenOpened == true)
        {
        window_Look();
        }
        else if (OvenHasBeenOpened == false)
        {
          if (oWindow.Visible == true) //check if the window is open and
          {  
            window_Close();
          }
          else if (oWindow.Visible == false)
          {
            window_Open();
          }
        }
        
        
      }
        
      else if (WindowHasBeenLookedOut == true) //if they have monologued then:
      {  
        if (oWindow.Visible == true) //check if the window is open and
        { 
         if (player.HasInventory(iBurger)) //then check if they have the burger already. if they do, we can just use this script as an open/close toggle. so close the window.
         { 
          window_Close();
         }       
         else if (player.HasInventory(iBurger) == false) //they didn't already have the burger.
         {
           PlayWindowClimbAnim(); //play the window climb anim and the appropriate cutscene.
         }
        }

        
        else if (oWindow.Visible == false) //otherwise, the window isn't open. so run the open script.
        {
          window_Open();
        }

      }

    }
  
    // LOOK AT
    else if(Verbs.UsedAction(eGA_LookAt)) {
      window_Look();
    }
    
        
    // OPEN
    else if(Verbs.UsedAction(eGA_Open)) { 
      window_Open();
    }
 
    // CLOSE
    else if(Verbs.UsedAction(eGA_Close)) { 
      window_Close();
    }
    
    
    
    
    
       // Pickup
    else if(Verbs.UsedAction(eGA_PickUp)) {
      GenericResponse(eResponse_Impossible);
    }
    
    
    // Push/Pull/Use With (UseInv)
    else if(Verbs.UsedAction(eGA_Push) || Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_UseInv)) {
      GenericResponse(eResponse_No);
    }

    // Talk To
    else if(Verbs.UsedAction(eGA_TalkTo)) {
      GenericResponse(eResponse_Talk);
    }
    
    // any other verb
    else {
      GenericResponse(eResponse_Uhh);
    }
  }  
}
  
  
  
  
  
  
  
  
  

    


function room_AfterFadeIn()
{



if (oWater.Visible == true) {
        waterChannel = aTapwater.Play(eAudioPriorityNormal, eRepeat);
}


if (cChalmers.Room == 4) //if chalmers is in the kitchen, we must be in act 2
{
  
  aMaintheme.Stop();
  
  cSkinner.SpeechView = VSKINNER_WINDOW_TALK;
  
   //aSkinner_iwasjust.Play();  
   //player.Say("Superintendent, I was just-");
   player.SayAt(175,  35,  110, "&11 Superintendent, I was just-");
   
   Wait(10);
   //Wait(20);
   
   //aSkinner_uh.Play();
   player.Say("&12 Uh-");
   
   EndCutscene();
   
   dIsometricExercise.Start();
}
else if (JustVisitedKrustyBurger) //if we just saw the "Later that day..." screen
{
  
 //unhide the ui
 gAction.Visible = true;
 gMain.Visible = true;
 mouse.Visible = true;
 
  //fix position because it's outside the walk boxes (aaaa)
  player.x = 194;
  player.y = 104;
  
   //play window UNclimbing animation
   player.LockView(VSKINNER_WINDOWUNCLIMB);
   player.Animate(0, 8, eOnce, eBlock);
       
  player.ChangeView(VSKINNER_WALK);
  player.SpeechView = VSKINNER_TALK;
  player.Walk(184, 106, eBlock, eAnywhere);
  
  JustVisitedKrustyBurger = false; //variable to make sure this transition only happens once
}


if (player.PreviousRoom == 1) //if skinner just came from the dining room, the door should quickly close
{
  oDiningRoomDoor.Visible = false;
}


}



function hDiningRoomDoor_AnyClick()
{
  
  if (Verbs.MovePlayer(35, 109)) { //get as close to the coords as possible
    
    player.FaceDirection(eDirectionLeft);
    
    // Look At
    if(Verbs.UsedAction(eGA_LookAt)) {
      GenericResponse(eResponse_Hmm);
    }

    // Open/Push/Pull/Use/Walk To
    else if(Verbs.UsedAction(eGA_Open) || Verbs.UsedAction(eGA_Push) || Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_Use)|| Verbs.UsedAction(eGA_WalkTo)) {
    
    
      //if (!ChalmersInHouse) { //chalmers hasn't entered the house yet
       // if(!Verbs.UsedAction(eGA_WalkTo)) //the player wasn't just trying to WALK to the door
       // {
       /// player.Say("&55 I'm right where I want to be."); //say a voiceline to indicate the door needs to be opened first
       // }
      //}    
      //else
      //{
        
        
    player.Walk(32, 109, eBlock, eAnywhere); 
   
      oDiningRoomDoor.Visible = true;
      player.LockView(VSKINNER_DOOR);
      player.Animate(eDirectionLeft, 4, eOnce, eBlock);
      player.UnlockView();
      aSwingdoor.Play();
      
      Wait(10);
      player.ChangeRoom(1, 250, 109, eDirectionLeft);
      oDiningRoomDoor.Visible = false;
      
     // }
    }
    
    // Close/Use With (UseInv)
    else if(Verbs.UsedAction(eGA_Close) || Verbs.UsedAction(eGA_UseInv)) {
      GenericResponse(eResponse_No);
    }

    // Pickup
    else if(Verbs.UsedAction(eGA_PickUp)) {
      GenericResponse(eResponse_Impossible);
    }

    // Talk To
    else if(Verbs.UsedAction(eGA_TalkTo)) {
      GenericResponse(eResponse_Talk);
    }
    
    // any other verb
    else {
      GenericResponse(eResponse_Uhh);
    }
  }  
}


function room_Load()
{
/*
  if(!ChalmersInHouse)
  {
  //chalmers doorbell timer
  SetTimer(1, (Random(3) + 3) * GetGameSpeed());  // restart timer, 3 to 6 seconds
  }
  else
  {
  //disable Chalmer's timer
  SetTimer(1, 0);
  }
*/


if (ChalmersInHouse) {
  //aFire_Quiet.Play(eAudioPriorityNormal, eRepeat);
  fireChannel = aFire.Play(eAudioPriorityNormal, eRepeat);
  fireChannel.Volume = 15;
  oOvenSmoke.Visible = true;
}


if (player.PreviousRoom == 1) //if skinner just came from the dining room, the door should be open
{
  oDiningRoomDoor.Visible = true;
}

if (cChalmers.Room == 4) //if chalmers is in the kitchen, we must be in act 2
{
  
  //fix position because it's outside the walk boxes (aaaa)
  player.x = 194;
  player.y = 104;

  
  cSkinner.SpeechView = VSKINNER_WINDOW_TALK;
}

}


function ToggleTaps()
{
        //turn the tap on if its off and vice versa   
      player.LockView(VSKINNER_DOOR);
      player.Animate(eDirectionRight, 4, eOnce, eBlock);
      player.UnlockView();
      
      if (oWater.Visible == false) {
        waterChannel = aTapwater.Play(eAudioPriorityNormal, eRepeat);
        oWater.Visible = true;
      }
      else
      {
        //aTapwater.Stop();
        waterChannel.Stop(); 
        oWater.Visible = false;
      }        
}



function hTaps_AnyClick()
{  
  if (Verbs.MovePlayer(75, 107)) {
    
    player.FaceDirection(eDirectionRight);
    
    // Walk To (does nothing)
    if(Verbs.UsedAction(eGA_WalkTo)) {
    }


    // USE
    else if(Verbs.UsedAction(eGA_Use)) {
      
      
            
ToggleTaps();
           
           
 
    }
  
    // LOOK AT
    else if(Verbs.UsedAction(eGA_LookAt)) {
      GenericResponse(eResponse_Hmm);
    }
    
        
    // OPEN
    else if(Verbs.UsedAction(eGA_Open)) { 
      if (!oWater.Visible) {
           ToggleTaps();
      }
      else {
        GenericResponse(eResponse_No);
      }
    }
 
    // CLOSE
    else if(Verbs.UsedAction(eGA_Close)) { 
      if (oWater.Visible) {
           ToggleTaps();
      }
      else {
        GenericResponse(eResponse_No);
      }
    }
    
    
    
    
    
    
    
    
    // Push/Pull/Use With (UseInv)
    else if(Verbs.UsedAction(eGA_Push) || Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_UseInv)) {
      GenericResponse(eResponse_No);
    }

    // Pickup
    else if(Verbs.UsedAction(eGA_PickUp)) {
      GenericResponse(eResponse_Impossible);
    }
    

    
    // Talk To
    else if(Verbs.UsedAction(eGA_TalkTo)) {
      GenericResponse(eResponse_Talk);
    }
    
    // any other verb
    else {
      GenericResponse(eResponse_Uhh);
    }
  }  
}
  
  
  








function room_Leave()
{
  aTapwater.Stop();
  //aFire_Quiet.Stop();

  if (fireChannel)
  {
  fireChannel.Stop();
  }

}

function room_FirstLoad()
{

  oOvenSmoke.SetView(VOVENSMOKE);
  oOvenSmoke.Animate(0,  4, eRepeat, eNoBlock);
//  oOvenSmoke.Transparency = 5;
}




function room_RepExec()
{
  if (IsTimerExpired(1)) {   

    AudioChannel* doorbellChannel = aDoorbell.Play();
    
    doorbellChannel.Volume = 20;

    cDoorbell.SayBackground("DING DONG");
    SetTimer(1, (Random(3) + 7) * GetGameSpeed());  // restart timer, 7 to 10 seconds
  }

}




function OpenContainer(this Object*, int VIEW, int DIRECTION)
{
       player.LockView(VIEW);
       player.Animate(DIRECTION, 8, eOnce, eBlock);
       player.UnlockView();
       
       aOpenOven.Play();
              
       this.Visible = true;
       
       Wait(20);
       
       if (OvenHasBeenOpened && !player.HasInventory(iBurger)) {
       GenericResponse(eResponse_DoesntHelp); //don't act stressed before chalmers is in the house
       }
       else
       {
       player.Say("&57 Eh, that's no help.");
       iResponse_DoesntHelp_Selection = 1; //set it so we don't hear this line again straight away when cycling through "cupboard is open and im stressed" lines
       }
       
       Wait(15);
  
  
       player.LockView(VIEW);
       player.Animate(DIRECTION, 8, eOnce, eBlock);
       player.UnlockView();
       
       aOpenOven.Play();
              
       this.Visible = false;
}



function hFridge_AnyClick()
{  
  if (Verbs.MovePlayer(65, 108)) {
    
    player.FaceDirection(eDirectionLeft);
    
    // Walk To (does nothing)
    if(Verbs.UsedAction(eGA_WalkTo)) {
    }

    // Look At
    else if(Verbs.UsedAction(eGA_LookAt)) {
      GenericResponse(eResponse_Hmm);
    }

     // Use/Push/Pull/Open
    else if(Verbs.UsedAction(eGA_Push) || Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_Use) || Verbs.UsedAction(eGA_Open)) {
            
      oFridge.OpenContainer(VSKINNER_PICKUP_MED, eDirectionLeft);
    }
    
      // Close/Pickup/Use With (UseInv)
    else if(Verbs.UsedAction(eGA_Close) || Verbs.UsedAction(eGA_PickUp) || Verbs.UsedAction(eGA_UseInv)) {
      GenericResponse(eResponse_No);
    }

    // Talk To
    else if(Verbs.UsedAction(eGA_TalkTo)) {
      GenericResponse(eResponse_Talk);
    }
    
    // any other verb
    else {
      GenericResponse(eResponse_Uhh);
    }
  }  
}


function hFreezer_AnyClick()
{  
  if (Verbs.MovePlayer(66, 108)) {
    
    player.FaceDirection(eDirectionLeft);
    
    // Walk To (does nothing)
    if(Verbs.UsedAction(eGA_WalkTo)) {
    }

    // Look At
    else if(Verbs.UsedAction(eGA_LookAt)) {
      GenericResponse(eResponse_Hmm);
    }

     // Use/Push/Pull/Open
    else if(Verbs.UsedAction(eGA_Push) || Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_Use) || Verbs.UsedAction(eGA_Open)) {
            
      oFreezer.OpenContainer(VSKINNER_PICKUP_HIGH, eDirectionLeft);
    }
    
      // Close/Pickup/Use With (UseInv)
    else if(Verbs.UsedAction(eGA_Close) || Verbs.UsedAction(eGA_PickUp) || Verbs.UsedAction(eGA_UseInv)) {
      GenericResponse(eResponse_No);
    }

    // Talk To
    else if(Verbs.UsedAction(eGA_TalkTo)) {
      GenericResponse(eResponse_Talk);
    }
    
    // any other verb
    else {
      GenericResponse(eResponse_Uhh);
    }
  }  
}





function hCupboardLeft_AnyClick()
{
  if (Verbs.MovePlayer(75, 110)) {
    
    player.FaceDirection(eDirectionRight);
    
    // Walk To (does nothing)
    if(Verbs.UsedAction(eGA_WalkTo)) {
    }

    // Look At
    else if(Verbs.UsedAction(eGA_LookAt)) {
      GenericResponse(eResponse_Hmm);
    }
    
    
     // Use/Push/Pull/Open
    else if(Verbs.UsedAction(eGA_Push) || Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_Use) || Verbs.UsedAction(eGA_Open)) {
            
      oCupboardLeft.OpenContainer(VSKINNER_PICKUP_LOW, eDirectionRight);
    }
    
    // Close
    else if(Verbs.UsedAction(eGA_Close)) {
      GenericResponse(eResponse_No);
    }
    
    
    // Pickup
    else if(Verbs.UsedAction(eGA_PickUp)) {
      GenericResponse(eResponse_Impossible);
    }
    
      // Use With (UseInv)
    else if(Verbs.UsedAction(eGA_UseInv)) {
      GenericResponse(eResponse_No);
    }

    // Talk To
    else if(Verbs.UsedAction(eGA_TalkTo)) {
      GenericResponse(eResponse_Talk);
    }
    
    // any other verb
    else {
      GenericResponse(eResponse_Uhh);
    }
  }  
}

function hCupboardRight_AnyClick()
{
  if (Verbs.MovePlayer(108, 110)) {
    
    player.FaceDirection(eDirectionRight);
    
    // Walk To (does nothing)
    if(Verbs.UsedAction(eGA_WalkTo)) {
    }

    // Look At
    else if(Verbs.UsedAction(eGA_LookAt)) {
      GenericResponse(eResponse_Hmm);
    }
    
     // Use/Push/Pull/Open
    else if(Verbs.UsedAction(eGA_Push) || Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_Use) || Verbs.UsedAction(eGA_Open)) {
            
      oCupboardRight.OpenContainer(VSKINNER_PICKUP_LOW, eDirectionRight);
    }
    
    // Close
    else if(Verbs.UsedAction(eGA_Close)) {
      GenericResponse(eResponse_No);
    }
    
    
    // Pickup
    else if(Verbs.UsedAction(eGA_PickUp)) {
      GenericResponse(eResponse_Impossible);
    }
    
      // Use With (UseInv)
    else if(Verbs.UsedAction(eGA_UseInv)) {
      GenericResponse(eResponse_No);
    }

    // Talk To
    else if(Verbs.UsedAction(eGA_TalkTo)) {
      GenericResponse(eResponse_Talk);
    }
    
    // any other verb
    else {
      GenericResponse(eResponse_Uhh);
    }
  }  
}
