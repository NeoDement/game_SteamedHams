// main global script file
import InventoryItem*ItemGiven;        // Item given to a character

// called when the game starts, before the first room is loaded

// =======================================================================================
function game_start() 
{
}

// put anything you want to happen every game cycle in here
function repeatedly_execute() 
{
}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}

void ShowOptions()
{
    Verbs.UpdateActionBar();
    OptionGui.ShowOptions();
}


// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) 
{
  if (gameStarted) { //don't do any of these until the game has actually started
    
    if (keycode == eKeyF5 && gPause.Visible == false && gQuit.Visible == false && gRestart.Visible == false && gThanksForPlaying.Visible == false) ShowOptions();
    if (keycode == eKeyF10 && gPause.Visible == false && gRestart.Visible == false && gOptions.Visible == false && gThanksForPlaying.Visible == false) gQuit.Visible=true;  // F10 QUIT
    if (keycode == eKeyCtrlQ && gPause.Visible == false && gRestart.Visible == false && gOptions.Visible == false && gThanksForPlaying.Visible == false) gQuit.Visible=true;  // CTRL-Q QUIT
   // if (keycode == eKeyF8 || keycode == eKeyCtrlR) gRestart.Visible = true; //F8 RESTART
    
    if (keycode == eKeyF8 && gPause.Visible == false && gQuit.Visible == false && gOptions.Visible == false && gThanksForPlaying.Visible == false) gRestart.Visible=true; //F8 RESTART
    if (keycode == eKeyCtrlR && gPause.Visible == false && gQuit.Visible == false && gOptions.Visible == false && gThanksForPlaying.Visible == false) gRestart.Visible=true;  // CTRL R RESTART
    
    //if (keycode == eKeyF12)   SaveScreenShot("scrnshot.pcx");  // F12
    
    
    //debug shortcuts
    if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
    if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
    if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
    if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to room

    
    if (keycode == eKeyW) Verbs.SetAction(eGA_WalkTo) && gAction.Visible == true; //set action to walk to when pressing w
  
  }
}


function on_mouse_click(MouseButton button) // called when a mouse button is clicked. button is either LEFT or RIGHT
{

}

function on_event(EventType event, int data) {
  if (event==eEventLeaveRoom)
  if (event==eEventRestoreGame) {
    Verbs.Localize();
  }
  if (event==eEventEnterRoomBeforeFadein || event==eEventRestoreGame)
    player.PlaceOnWalkableArea();
}

function dialog_request(int param) {
}


////////////////////////////////////////////////////////////////////////////////////
// Begin of GUI handling
////////////////////////////////////////////////////////////////////////////////////
function Action_Click(GUIControl *control, MouseButton button) {
  Verbs.SetAction(Verbs.GetButtonAction(control.AsButton));
}

function ScrollInv_Click(GUIControl *control, MouseButton button) {
  if (control == btnInvUp) invMain.ScrollUp();
  else invMain.ScrollDown();  
}

function btnShowOptions_OnClick(GUIControl *control, MouseButton button)
{
  ShowOptions();
}

function btnOptions_OnClick(GUIControl *control, MouseButton button)
{
    OptionGui.OnClick(control, button);
}

function btnOptions_OnSliderChange(GUIControl *control)
{
    OptionGui.OnSliderChange(control);
}


////////////////////////////////////////////////////////////////////////////////////
// End of GUI handling
////////////////////////////////////////////////////////////////////////////////////


/* Character, Object, Hotspot full blown SAMPLE
function cChar_AnyClick() {
  // WALK TO
  if (Verbs.UsedAction(eGA_WalkTo)) {
    Verbs.GoTo();
  }
  // TALK TO 
  else if (Verbs.UsedAction(eGA_TalkTo)) {
    Verbs.Unhandled();
  }
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Verbs.Unhandled();
  }
  // OPEN
  else if(Verbs.UsedAction(eGA_Open)) {
    Verbs.Unhandled();
  }  
  // CLOSE
  else if(Verbs.UsedAction(eGA_Close)) {
    Verbs.Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
    Verbs.Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Verbs.Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Verbs.Unhandled();
  } 
  // PICKUP
  else if(Verbs.UsedAction(eGA_PickUp)) {
    Verbs.Unhandled();
  }
  // GIVE TO (characters only)
  else if(Verbs.UsedAction(eGA_GiveTo)) {
    Verbs.Unhandled();
  }  
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
    Verbs.Unhandled();
  }
  else Verbs.Unhandled();
}
*/

/* Inventory SAMPLE
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
    Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Unhandled();
  }   
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
    Unhandled();
  }
  else Unhandled();

*/


/***********************************************************************
 * Inventory functions
 * 
 ***********************************************************************/
 
 
 /*
function iCup_OtherClick()
{
  if (Verbs.UsedAction(eGA_Use)) {
    player.Say("Let's spill the liquid and have a look.");
    Wait(10);
    //player.LoseInventory(iCup);
    //player.AddInventory(iCupEmpty);
    //player.AddInventory(iKeyCard);
    player.Say("Voilà, I found a keycard.");
  }
  else if (Verbs.UsedAction(eGA_LookAt)) {
    player.Say("It is a blue cup, filled with liquid.");
    player.Say("I could swear that there is tiny object shimmering on the ground.");
  }
  else Verbs.Unhandled();
}

function iCupEmpty_OtherClick()
{
  if (Verbs.UsedAction(eGA_LookAt)) {
    player.Say("It is an empty cup.");
  }
  else Verbs.Unhandled();
}

function iKeyCard_OtherClick()
{
  if (Verbs.UsedAction(eGA_LookAt)) {
    player.Say("It is a massive key card. I wonder how it fit in the cup.");
  }
  else Verbs.Unhandled();
}
*/


/***********************************************************************
 * Character functions
 * 
 ***********************************************************************/
function cHologram_AnyClick()
{
  //Walk to
  if (Verbs.UsedAction(eGA_WalkTo)) {
    Verbs.GoTo();
  }
  // TALK TO
  if (Verbs.UsedAction(eGA_TalkTo)) {
    //dDialog1.Start();
  }
  // LOOK AT
  else if(Verbs.UsedAction(eGA_LookAt)) {
    Verbs.Unhandled();
  }
  // OPEN
  else if(Verbs.UsedAction(eGA_Open)) {
    Verbs.Unhandled();
  }  
  // CLOSE
  else if(Verbs.UsedAction(eGA_Close)) {
    Verbs.Unhandled();
  }
  // USE
  else if(Verbs.UsedAction(eGA_Use)) {
   Verbs.Unhandled();
  }
  // Push
  else if(Verbs.UsedAction(eGA_Push)) {
    Verbs.Unhandled();
  }
  // Pull
  else if(Verbs.UsedAction(eGA_Pull)) {
    Verbs.Unhandled();
  } 
  // PICKUP
  else if(Verbs.UsedAction(eGA_PickUp)) {
    Verbs.Unhandled();
  }
  // GIVE TO
  else if (Verbs.UsedAction(eGA_GiveTo)) {
    player.Say("Do you want this?");
    //cHologram.Say("I have no pockets.");
  }
  //USE INV
  else if(Verbs.UsedAction(eGA_UseInv)) {
    player.Say("A hologram has no pockets.");
  }
  else Verbs.Unhandled();
}







//function to give generic responses for interacting with objects

function GenericResponse(eGenericResponse responseType)
{
  if (responseType == eResponse_No)
  {
  
  
    switch(iResponse_No_Selection)
    {
      case 0:
      {
        player.Say("&41 No.");
        iResponse_No_Selection++;
        break;
      }
      
      case 1:
      {
        player.Say("&45 No!");
        iResponse_No_Selection++;
        break;
      }
      
      case 2:
      {
        player.Say("&52 Fat chance.");
        iResponse_No_Selection = 0;
        break;
      }  
      
      //todo: disabled for now
      case 3:
      {       
        player.Say("&46 No!");
        iResponse_No_Selection = 0;
        break;
      }   
   }
   
    
  }
  else if (responseType == eResponse_Uhh)
  {
    
    switch(iResponse_Uhh_Selection)
    {
      case 0:
      {
        player.Say("&16 Uhh.");
        iResponse_Uhh_Selection++;
        break;
      }
      
        case 1:
      {
        player.Say("&44 Uhh...");
        iResponse_Uhh_Selection++;
        break;
      }
      
        case 2:
      {
        player.Say("&12 Uh.");
        iResponse_Uhh_Selection = 0;
        break;
      }
    }
  }
 
   else if (responseType == eResponse_Yummy)
  {
    
    switch(iResponse_Yummy_Selection)
    {
      case 0:
      {
        player.Say("&33 Old family recipe!");
        iResponse_Yummy_Selection++;
        break;
      }
      
        case 1:
      {
        
       player.SpeechView = VSKINNER_MMM;
       player.Say("&20 Mmm.");

        Wait(1);
       
       player.SpeechView = VSKINNER_TALK;
        iResponse_Yummy_Selection = 0;
        break;
      }

    }
  }
    



   else if (responseType == eResponse_DoesntHelp)
  {
    
    switch(iResponse_DoesntHelp_Selection)
    {
      case 0:
      {
        player.Say("&57 Eh, that's no help.");
        iResponse_DoesntHelp_Selection++;
        break;
      }
      
        case 1:
      {
        player.Say("&58 Aw, nuts!");
        iResponse_DoesntHelp_Selection++;
        break;
      }
      
        case 2:
      {
        player.Say("&52 Fat chance.");
        iResponse_DoesntHelp_Selection = 0;
        break;
      }
    }

    
  }
  

   else if (responseType == eResponse_Hmm)
  {
    
    switch(iResponse_Hmm_Selection)
    {
      case 0:
      {
        player.Say("&47 Riveting.");
        iResponse_Hmm_Selection++;
        break;
      }
      
        case 1:
      {
        player.Say("&51 Above average.");
        iResponse_Hmm_Selection++;
        break;
      }
      
        case 2:
      {
        player.Say("&48 Truly a standard deviation above the mean.");
        iResponse_Hmm_Selection = 0;
        break;
      }
    }

    
  }
  

  else if (responseType == eResponse_Talk)
  {
/*
    switch(Random(2))
    {
      case 0:
      {
        */
        player.Say("&53 Hello...");
        /*
        break;
      }
      
        case 1:
      {
        player.Say("&50 Hello... I'm uh... I'm...");
        break;
      }
      
        case 2:
      {
        player.Say("&50 Hello... I'm uh... I'm...");
        break;
      }
    }  */
  }

   else if (responseType == eResponse_WontLeave)
  {
    
    switch(iResponse_WontLeave_Selection)
    {
      case 0:
      {
      player.Say("&49 I'm afraid we're stuck here for the duration.");
        iResponse_WontLeave_Selection++;
        break;
      }
    
      case 1:
      {
        
      player.Say("&60 No one leaves the building.");
      
        iResponse_WontLeave_Selection = 0;
        break;
      }

    }
  }
 
 
    else if (responseType == eResponse_PickupChalmers)
  {
    
    switch(iResponse_PickupChalmers_Selection)
    {
      case 0:
      {
        player.Say("&56 I have it going on.");
        Wait(6);
        cChalmers.Say("&33 Seymour, you are an odd fellow.");
        iResponse_PickupChalmers_Selection++;
        break;
      }
      
        case 1:
      {
        player.Say("&64 Well, sir, I uh-");
        Wait(6);
        cChalmers.Say("&33 Seymour, you are an odd fellow.");
        iResponse_PickupChalmers_Selection++;
        break;
      }
      
        case 2:
      {
        player.Say("&61 Chew through my ball sack.");
        Wait(6);
        cChalmers.Say("&33 Seymour, you are an odd fellow.");
        Wait(10);
        player.Say("&63 I know.");
        Wait(30);
        player.LockView(VSKINNER_GRIN); 
        player.Animate(1, 60, eOnce, eBlock);
        player.UnlockView();
        iResponse_PickupChalmers_Selection = 0;
        break;
      }
    }

    
  }
  
  
  
  else if (responseType == eResponse_Impossible)
  {
        player.Say("&59 It's physically impossible.");
  }
}


















//this one is a global function because you can start it by giving/using the burger on Chalmers
function StartTableConversation()
{
  

  
        //player.Walk(180, 116, eBlock);
    if (Verbs.MovePlayer(180, 116)) {
      
        StartCutscene(eSkipESCOrRightButton);
        
         //hide the ui
         gAction.Visible = false;
         gMain.Visible = false;
 
        player.LockView(VSKINNER_PICKUP_MED);
        player.Animate(eDirectionLeft, 4, eOnce, eBlock);
        player.UnlockView();

      
        player.LoseInventory(iBurger);
        
        //oSteamedHams.Visible = true;
        object[3].Visible = true;
        
        //aSwipe_Low.Play();
        
        cSkinner.SayAt(180, 50, 200, "&23 Superintendent, I hope you're ready for mouthwatering hamburgers.");
        
        cSkinner.Walk(201, 116, eBlock, eAnywhere);
        
        cSkinner.Walk(209, 109, eBlock, eAnywhere);
        
        //cSkinner.y = 109; //strange fix because he won't walk to the exact correct vertical pixel
        
        //oTableRight.Visible = true;
        object[5].Visible = true;
        cSkinner.LockView(VSKINNER_SIT_ALT);
        cSkinner.Animate(eDirectionLeft, 3, eOnce, eBlock);
        
        cSkinner.SpeechView = VSKINNER_SIT_TALK;
        cSkinner.ChangeView(VSKINNER_SIT_IDLE);
        cSkinner.UnlockView();
             
        cChalmers.Say("&7 I thought we were having steamed clams.");
        
        EndCutscene();
        
        dSteamedHams.Start();
    }
}





function iBurger_OtherClick()
{

    // Walk To (does nothing)
    if(Verbs.UsedAction(eGA_WalkTo)) {
    }

    // Look At
    else if(Verbs.UsedAction(eGA_LookAt)) {
   	 player.Say("&43 Mouthwatering hamburgers.");
    }
    
    // Push/Pull/Close/Use With (UseInv)
    else if(Verbs.UsedAction(eGA_Push) || Verbs.UsedAction(eGA_Pull) || Verbs.UsedAction(eGA_Close) || Verbs.UsedAction(eGA_UseInv)) {
      GenericResponse(eResponse_No);
    }

      // Use/Open
      else if(Verbs.UsedAction(eGA_Use) || Verbs.UsedAction(eGA_Open)) {
        if (player.Room == 1) {
        StartTableConversation();
        }
        else
        {
          GenericResponse(eResponse_Hmm);
        }
      }
      
    // Talk To
    else if(Verbs.UsedAction(eGA_TalkTo)) {
      GenericResponse(eResponse_Talk);
    }
    
    // any other verb
    else {
      GenericResponse(eResponse_Uhh);
    }
    
}




function cChalmers_AnyClick()
{
  
      // Push/Pull
      if(Verbs.UsedAction(eGA_Push) || Verbs.UsedAction(eGA_Pull)) {
         if (Verbs.MovePlayer(145, 116)) {  
         
         
         //useless sound
         //aSkinner_Push.Play();
         //Game.PlayVoiceClip(cSkinner, 59, true);

//player.SayBackground("&59 TEST HELLO");



       player.LockView(VSKINNER_PICKUP_MED);
       player.Animate(eDirectionLeft, 8, eOnce, eBlock);
       player.UnlockView();
       Wait(5);
       cChalmers.Say("&3 Nyeh.");
      }
      }
      
      // Use With (UseInv)/Give
      else if(Verbs.UsedAction(eGA_UseInv) || Verbs.UsedAction(eGA_GiveTo)) {
        if (player.ActiveInventory==iBurger) {    
           StartTableConversation();
        }
      }
      
      else
      
      {
      
     
  if ( (player.x == 145 && player.y == 116) || (Verbs.MovePlayer(160, 116)) ) { //don't bother moving if you're already in position from PUSHing or PULLing chalmers.
    
    player.FaceDirection(eDirectionLeft);
    
      // Walk To (does nothing)
      if(Verbs.UsedAction(eGA_WalkTo)) {
      }

      // Look At
      else if(Verbs.UsedAction(eGA_LookAt)) {
       //player.Say("&48 Truly a standard deviation above the mean.");
       player.Say("&62 Superintendent Chalmers.");
      }

      // Open/Close
      else if(Verbs.UsedAction(eGA_Open) || Verbs.UsedAction(eGA_Close)) {
        GenericResponse(eResponse_No);
      }
 
       // Pick Up
      else if(Verbs.UsedAction(eGA_PickUp)) {
        GenericResponse(eResponse_PickupChalmers);
      }
      
      // Talk To
      else if(Verbs.UsedAction(eGA_TalkTo)) {
        
        player.Walk(160, 116, eBlock); //reposition the player to a comfortable talking distance. just in case!
        player.FaceDirection(eDirectionLeft);
        
      if (player.HasInventory(iBurger)) {
        dTalkToChalmers_WithBurger.Start();
      }
      else
      {
        dTalkToChalmers.Start();
       }
      }
      

      
      // any other verb
      else {
        GenericResponse(eResponse_Uhh);
      }
        }
  
      }
    
}

function gPause_OnClick(GUI *theGui, MouseButton button)
{

}

function Button1_OnClick(GUIControl *control, MouseButton button)
{
  
  aPacifier.Play();
  
if (Button1.NormalGraphic == 32) //32 - pressed
{
  Button1.NormalGraphic = 31;
  Speech.VoiceMode = eSpeechTextOnly;
//  Button1.PushedGraphic = 32;
}
else //31 - not pressed
{
  Button1.NormalGraphic = 32;
  Speech.VoiceMode = eSpeechVoiceAndText;
  
//  Button1.PushedGraphic = 31;
}
}
